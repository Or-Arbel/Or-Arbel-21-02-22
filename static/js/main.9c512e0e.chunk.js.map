{"version":3,"sources":["components/NavLinks/styles.module.scss","components/ThemeToggleButton/ThemeToggleButton.js","components/NavLinks/NavLinks.js","components/Nav/Nav.js","redux/favoritesSlice.js","redux/citySlice.js","components/Homepage/Homepage.js","components/Favorites/Favorites.js","App.js","redux/store.js","index.js","components/Nav/styles.module.scss","components/ThemeToggleButton/styles.module.scss"],"names":["module","exports","ThemeToggleButton","useContext","ThemeContext","isDarkMode","toggleMode","modeButtonContent","className","styles","modeDiv","size","modeButton","onClick","NavLinks","navlinks","to","Nav","nav","logo","favoritesSlice","createSlice","name","initialState","reducers","add","state","action","push","payload","remove","index","findIndex","city","id","splice","actions","citySlice","setCity","cityName","country","Homepage","favoriteCities","useSelector","favorites","cityData","dispatch","useDispatch","useState","openErrorToast","setOpenErrorToast","tempScale","setTempScale","citiesOptions","setCitiesOptions","currentWeather","setCurrentWeather","weeklyWeather","setWeeklyWeather","getDefaultCity","a","axios","get","process","then","res","data","AdministrativeArea","LocalizedName","Country","Key","catch","err","console","warn","useEffect","getFiveDaysWeather","getCityWeather","fetchData","cityKey","celsius","Math","round","Temperature","Metric","Value","fahrenheit","Imperial","text","WeatherText","days","stringDay","weeklyArr","DailyForecasts","i","length","Date","getDay","undefined","day","minTempCelsius","Minimum","maxTempCelsius","Maximum","minTempFahrenheit","maxTempFahrenheit","isInFavorites","onInputChangeHandler","event","value","query","test","newOptionsArr","forEach","element","key","handleClose","reason","Autocomplete","disablePortal","onInputChange","e","v","onChange","options","getOptionLabel","option","sx","width","renderInput","params","TextField","label","Snackbar","open","autoHideDuration","onClose","Alert","severity","existsInFavorites","CircularProgress","FormControl","RadioGroup","row","target","FormControlLabel","control","Radio","map","Favorites","top","cascade","favoriteClicked","style","color","fontWeight","createContext","App","setIsDarkMode","Provider","prevMode","exact","path","component","store","configureStore","reducer","favoritesReducer","cityReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,SAAW,2B,uOC4BdC,EArBW,WACxB,MAAmCC,qBAAWC,GAAtCC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,WAEdC,EACJ,sBAAKC,UAAWC,IAAOC,QAAvB,UACGL,EAAa,cAAC,IAAD,CAAOM,KAAM,KAAS,cAAC,IAAD,CAAQA,KAAM,KACjDN,EACC,wDAEA,0DAKN,OACE,wBAAQG,UAAWC,IAAOG,WAAYC,QAASP,EAA/C,SACGC,K,kBCHQO,EAhBE,WACf,OACE,sBAAKN,UAAWC,IAAOM,SAAvB,UACE,+BACE,cAAC,IAAD,CAAMC,GAAG,sBAAT,SACE,wCAEF,cAAC,IAAD,CAAMA,GAAG,cAAT,SACE,gDAGJ,cAAC,EAAD,QCESC,MAZf,WACE,OACE,sBAAKT,UAAWC,IAAOS,IAAvB,UACE,sBAAKV,UAAWC,IAAOU,KAAvB,UACE,cAAC,IAAD,CAAsBR,KAAM,KAC5B,8CAEF,cAAC,EAAD,Q,4KCTOS,EAAiBC,YAAY,CACxCC,KAAM,YACNC,aAJmB,GAKnBC,SAAU,CACRC,IAAK,SAACC,EAAOC,GACXD,EAAME,KAAKD,EAAOE,UAEpBC,OAAQ,SAACJ,EAAOC,GACd,IAAMI,EAAQL,EAAMM,WAAU,SAACC,GAAD,OAAUA,EAAKC,KAAOP,EAAOE,QAAQK,MACnER,EAAMS,OAAOJ,EAAO,OAKnB,EAAwBX,EAAegB,QAA/BX,EAAR,EAAQA,IAAKK,EAAb,EAAaA,OACLV,IAAf,QCRMiB,EAAYhB,YAAY,CAC5BC,KAAM,OACNC,aAXmB,GAYnBC,SAAU,CACRc,QAAS,SAACZ,EAAOC,GACfD,EAAMa,SAAWZ,EAAOE,QAAQU,SAChCb,EAAMc,QAAUb,EAAOE,QAAQW,QAC/Bd,EAAMQ,GAAKP,EAAOE,QAAQK,OAKjBI,EAAYD,EAAUD,QAAtBE,QACAD,IAAf,QCgUeI,MArUf,WACE,IAAQpC,EAAeF,qBAAWC,GAA1BC,WAEFqC,EAAiBC,aAAY,SAACjB,GAAD,OAAWA,EAAMkB,aAC9CC,EAAWF,aAAY,SAACjB,GAAD,OAAWA,EAAMO,QACxCa,EAAWC,cAEjB,EAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAkCF,mBAAS,WAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEA,EAA0CJ,mBAAS,IAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAA4CN,mBAAS,IAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KACA,EAA0CR,mBAAS,IAAnD,mBAAOS,EAAP,KAAsBC,EAAtB,KAEMC,EAAc,uCAAG,sBAAAC,EAAA,sEACAC,IAClBC,IADkB,2FAEmEC,mCAFnE,2BAIlBC,MAAK,SAACC,GACLnB,EACER,EAAQ,CACNC,SAAU0B,EAAIC,KAAKC,mBAAmBC,cACtC5B,QAASyB,EAAIC,KAAKG,QAAQD,cAC1BlC,GAAI+B,EAAIC,KAAKI,UAIlBC,OAAM,SAACC,GACNC,QAAQC,KAAKF,MAfI,yDAAH,qDAmBpBG,qBAAU,WACH9B,EAASX,IACZyB,MAED,IAEHgB,qBAAU,YACO,uCAAG,sBAAAf,EAAA,0DACZf,EAASX,GADG,gCAER0C,EAAmB/B,EAASX,IAFpB,uBAGR2C,EAAehC,EAASX,IAHhB,2CAAH,qDAMf4C,KACC,CAACjC,IAEJ,IAAMgC,EAAc,uCAAG,WAAOE,GAAP,SAAAnB,EAAA,sDACrBC,IACGC,IADH,kEAE+DiB,EAF/D,mBAEiFhB,qCAE9EC,MAAK,SAACC,GAAD,OAASA,EAAIC,KAAK,MACvBF,MAAK,SAACC,GACLT,EAAkB,CAChBwB,QAASC,KAAKC,MAAMjB,EAAIkB,YAAYC,OAAOC,OAC3CC,WAAYL,KAAKC,MAAMjB,EAAIkB,YAAYI,SAASF,OAChDG,KAAMvB,EAAIwB,iBAGblB,OAAM,SAACC,GACNC,QAAQC,KAAKF,MAdI,2CAAH,sDAkBdI,EAAkB,uCAAG,WAAOG,GAAP,mBAAAnB,EAAA,6DACnB8B,EAAO,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAEEC,EAAY,GACZC,EAXqB,OAWTnC,QAXS,IAWTA,IAAiB,GAXR,SAanBI,IACHC,IADG,qEAE4DiB,EAF5D,mBAE8EhB,mCAF9E,iBAIHC,MAAK,SAACC,GAAD,OAASA,EAAIC,KAAK2B,kBACvB7B,MAAK,SAACC,GACL,IAAK,IAAI6B,EAAI,EAAGA,EAAI7B,EAAI8B,OAAQD,IAC9BH,EAAYD,EAAK,IAAIM,KAAK/B,EAAI6B,GAAGE,MAAMC,eAClBC,IAAjBN,EAAUE,KACZF,EAAUE,GAAK,CAAEK,IAAKR,IAExBC,EAAUE,GAAGM,eAAiBnB,KAAKC,MACjCjB,EAAI6B,GAAGX,YAAYkB,QAAQhB,OAE7BO,EAAUE,GAAGQ,eAAiBrB,KAAKC,MACjCjB,EAAI6B,GAAGX,YAAYoB,QAAQlB,UAIhCd,OAAM,SAACC,GACNC,QAAQC,KAAKF,MAjCQ,uBAoCnBX,IACHC,IADG,qEAE4DiB,EAF5D,mBAE8EhB,mCAF9E,kBAIHC,MAAK,SAACC,GAAD,OAASA,EAAIC,KAAK2B,kBACvB7B,MAAK,SAACC,GACL,IAAK,IAAI6B,EAAI,EAAGA,EAAI7B,EAAI8B,OAAQD,IAC9BH,EAAYD,EAAK,IAAIM,KAAK/B,EAAI6B,GAAGE,MAAMC,UACvCL,EAAUE,GAAGU,kBAAoBvB,KAAKC,MACpCjB,EAAI6B,GAAGX,YAAYkB,QAAQhB,OAE7BO,EAAUE,GAAGW,kBAAoBxB,KAAKC,MACpCjB,EAAI6B,GAAGX,YAAYoB,QAAQlB,UAIhCd,OAAM,SAACC,GACNC,QAAQC,KAAKF,MArDQ,OAwDzBd,EAAiBkC,GAxDQ,2CAAH,sDA2DlBc,EAAgB,WACpB,IAAK,IAAIZ,EAAI,EAAGA,EAAIpD,EAAeqD,OAAQD,IACzC,GAAIpD,EAAeoD,GAAG5D,KAAOW,EAASX,GACpC,OAAO,EAGX,OAAO,GA4CHyE,EAAuB,SAACC,EAAOC,GACnC,IA1BkBC,EA0BJ,gBACHC,KAAKF,IA3BEC,EA8BLD,EA7BbhD,IACGC,IADH,qFAEkFC,mCAFlF,cAEqH+C,IAElH9C,MAAK,SAACC,GAAD,OAASA,EAAIC,QAClBF,MAAK,SAACC,GACL,GAAIA,EAAK,CACP,IAAI+C,EAAgB,GACpB/C,EAAIgD,SAAQ,SAACC,GACXF,EAAcpF,KAAK,CACjBW,SAAU2E,EAAQ9C,cAClB5B,QAAS0E,EAAQ7C,QAAQD,cACzBlC,GAAIgF,EAAQ5C,IACZ6C,IAAKD,EAAQ5C,SAGjBhB,EAAiB0D,OAGpBzC,OAAM,SAACC,GACNC,QAAQC,KAAKF,OAOftB,GAAkB,IAMhBkE,EAAc,SAACR,EAAOS,GACX,cAAXA,GAIJnE,GAAkB,IAGpB,OACE,cAAC,IAAD,UACE,gCACE,sBAAK1C,UAAU,aAAf,UACE,cAAC8G,EAAA,EAAD,CACEC,eAAa,EACbrF,GAAG,oBACHsF,cAAe,SAACC,EAAGC,GAAJ,OAAUf,EAAqBc,EAAGC,IACjDC,SAAU,SAACF,EAAGC,GACF,OAANA,GACF5E,EAASR,EAAQoF,KAGrBE,QAASvE,EACTwE,eAAgB,SAACC,GAAD,OAAYA,EAAOvF,UACnCwF,GAAI,CAAEC,MAAO,KACbC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAM,oBAIjC,cAACC,EAAA,EAAD,CACEC,KAAMrF,EACNsF,iBAAkB,IAClBC,QAASpB,EAHX,SAKE,cAACqB,EAAA,EAAD,CACED,QAASpB,EACTsB,SAAS,QACTX,GAAI,CAAEC,MAAO,QAHf,sDAUJ,sBACExH,UACEH,EAAa,+BAAiC,cAFlD,UAKE,sBAAKG,UAAU,mBAAf,UACGqC,EAASX,IAAMqB,EAAeyB,QAC7B,qCACGnC,EAASN,SADZ,KACwBM,EAASL,WAGjC,wBAEF,yBACE3B,QAAS,WA5GS,IAAC8H,IA6GKjC,IA3GhC5D,GADwB,IAAtB6F,EACO7G,EAAOe,GAGdpB,EAAI,CACFc,SAAUM,EAASN,SACnBC,QAASK,EAASL,QAClBN,GAAIW,EAASX,GACb8C,QAASzB,EAAeyB,QACxBM,WAAY/B,EAAe+B,eAiGzB,UAKGoB,IACC,cAAC,IAAD,CAAiB/F,KAAM,KAEvB,cAAC,IAAD,CAAaA,KAAM,KAErB,+BACG+F,IAAkB,wBAA0B,2BAInD,qBAAKlG,UAAU,cAAf,SACGqC,EAASX,IAAMqB,EAAeyB,QAC7B,qCACE,6BACiB,YAAd7B,EACGI,EAAeyB,QAAU,QACzBzB,EAAe+B,WAAa,UAElC,6BAAK/B,EAAeiC,UAGtB,cAACoD,EAAA,EAAD,MAIJ,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CACEC,KAAG,EACH,kBAAgB,sBAChBlC,MAAO1D,EACP7B,KAAK,sBACLqG,SAAU,SAACF,GAAD,OAAOrE,EAAaqE,EAAEuB,OAAOnC,QALzC,UAOE,cAACoC,EAAA,EAAD,CACEpC,MAAM,UACNqC,QAAS,cAACC,EAAA,EAAD,IACTf,MAAM,YAER,cAACa,EAAA,EAAD,CACEpC,MAAM,aACNqC,QAAS,cAACC,EAAA,EAAD,IACTf,MAAM,oBAKZ,qBAAK5H,UAAU,aAAf,SACGiD,EAAc2F,KAAI,SAAC3B,EAAG3B,GACrB,OACE,qBAAKtF,UAAU,oBAAf,SACE,8BACGiH,EAAEtB,IACH,uBACe,YAAdhD,GAA2BsE,EAAErB,gBAC5B,qCACGqB,EAAErB,eADL,WAC0BqB,EAAEnB,eAD5B,WAIa,eAAdnD,GAA8BsE,EAAEjB,mBAC/B,qCACGiB,EAAEjB,kBADL,WAC6BiB,EAAEhB,kBAD/B,eAVkCX,QAmB9C,oICxQKuD,MA9Df,WACE,IAAQhJ,EAAeF,qBAAWC,GAA1BC,WAEFqC,EAAiBC,aAAY,SAACjB,GAAD,OAAWA,EAAMkB,aAC9CE,EAAWC,cAYjB,OACE,cAAC,IAAD,CAAMuG,KAAG,EAACC,SAAO,EAAjB,SACE,gCACE,oBAAI/I,UAAWH,EAAa,YAAc,aAA1C,6BAGCqC,EAAeqD,OAAS,EACvBrD,EAAe0G,KAAI,SAAC3B,EAAG3B,GACrB,OACE,sBAAKtF,UAAU,qBAAf,UACE,wBACEA,UAAU,YACVK,QAAS,kBAAMiC,EAAShB,EAAO2F,KAFjC,oBAMA,eAAC,IAAD,CACEzG,GAAG,IACHR,UAAU,eACVK,QAAS,kBA7BD,SAAC4G,GACvB3E,EACER,EAAQ,CACNC,SAAUkF,EAAElF,SACZC,QAASiF,EAAEjF,QACXN,GAAIuF,EAAEvF,MAwBmBsH,CAAgB/B,IAHjC,UAKE,gCACGA,EAAElF,SADL,KACiBkF,EAAEjF,WAEnB,sBAAKiH,MAAO,CAAEC,MAAO,SAArB,UACGjC,EAAEzC,QADL,YACoByC,EAAEnC,WADtB,iBAfqCQ,MAuB7C,mCACE,oBAAG2D,MAAO,CAAEC,MAAOrJ,EAAa,QAAU,SAA1C,UACE,sBAAMoJ,MAAO,CAAEE,WAAY,QAA3B,+BACA,uBAFF,0FC7CCvJ,EAAewJ,0BAoCbC,OAlCf,WACE,MAAoC7G,oBAAS,GAA7C,mBAAO3C,EAAP,KAAmByJ,EAAnB,KAKA,OACE,cAAC1J,EAAa2J,SAAd,CAAuBlD,MAAO,CAAExG,aAAYC,WAL3B,WACjBwJ,GAAc,SAACE,GAAD,OAAeA,OAI7B,SACE,cAAC,IAAD,UACE,sBAAKxJ,UAAWH,EAAa,UAAY,MAAzC,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CACE4J,OAAK,EACLC,KAAK,sBACLC,UAAW,WACT,OAAO,cAAC,EAAD,OAGX,cAAC,IAAD,CACEF,OAAK,EACLC,KAAK,cACLC,UAAW,WACT,OAAO,cAAC,EAAD,OAGX,cAAC,IAAD,CAAUnJ,GAAG,mCCpCZoJ,GAAQC,YAAe,CAClCC,QAAS,CACP1H,UAAW2H,EACXtI,KAAMuI,KCAVC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACE,cAAC,IAAMO,WAAP,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,U,mBCZ1B7K,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,uB,mBCAnDD,EAAOC,QAAU,CAAC,WAAa,2BAA2B,QAAU,2B","file":"static/js/main.9c512e0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navlinks\":\"styles_navlinks__JEwNa\"};","import React, { useContext } from \"react\";\r\nimport { ThemeContext } from \"../../App\";\r\n\r\nimport { CgSun } from \"react-icons/cg\";\r\nimport { HiMoon } from \"react-icons/hi\";\r\n\r\nimport styles from \"./styles.module.scss\";\r\n\r\nconst ThemeToggleButton = () => {\r\n  const { isDarkMode, toggleMode } = useContext(ThemeContext);\r\n\r\n  const modeButtonContent = (\r\n    <div className={styles.modeDiv}>\r\n      {isDarkMode ? <CgSun size={20} /> : <HiMoon size={20} />}\r\n      {isDarkMode ? (\r\n        <span>Change to light mode</span>\r\n      ) : (\r\n        <span>Change to dark mode</span>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <button className={styles.modeButton} onClick={toggleMode}>\r\n      {modeButtonContent}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ThemeToggleButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ThemeToggleButton from \"../ThemeToggleButton/ThemeToggleButton\";\r\nimport styles from \"./styles.module.scss\";\r\n\r\nconst NavLinks = () => {\r\n  return (\r\n    <div className={styles.navlinks}>\r\n      <ul>\r\n        <Link to=\"/Or-Arbel-21-02-22/\">\r\n          <li>Home</li>\r\n        </Link>\r\n        <Link to=\"/favorites/\">\r\n          <li>Favorites</li>\r\n        </Link>\r\n      </ul>\r\n      <ThemeToggleButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavLinks;\r\n","import React from \"react\";\r\nimport { TiWeatherPartlySunny } from \"react-icons/ti\";\r\n\r\nimport styles from \"./styles.module.scss\";\r\nimport NavLinks from \"../NavLinks/NavLinks\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className={styles.nav}>\r\n      <div className={styles.logo}>\r\n        <TiWeatherPartlySunny size={20} />\r\n        <span>Weather</span>\r\n      </div>\r\n      <NavLinks />\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [];\r\n\r\nexport const favoritesSlice = createSlice({\r\n  name: \"favorites\",\r\n  initialState,\r\n  reducers: {\r\n    add: (state, action) => {\r\n      state.push(action.payload);\r\n    },\r\n    remove: (state, action) => {\r\n      const index = state.findIndex((city) => city.id === action.payload.id);\r\n      state.splice(index, 1);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { add, remove } = favoritesSlice.actions;\r\nexport default favoritesSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {};\r\n\r\n/*\r\n  before the Geolocation task the initialState was: \r\n   cityName: \"Tel Aviv\",\r\n   country: \"Israel\",\r\n   id: 215854,\r\n*/\r\n\r\nconst citySlice = createSlice({\r\n  name: \"city\",\r\n  initialState,\r\n  reducers: {\r\n    setCity: (state, action) => {\r\n      state.cityName = action.payload.cityName;\r\n      state.country = action.payload.country;\r\n      state.id = action.payload.id;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setCity } = citySlice.actions;\r\nexport default citySlice.reducer;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\nimport { BsSuitHeart, BsSuitHeartFill } from \"react-icons/bs\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Autocomplete from \"@mui/material/Autocomplete\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport Alert from \"@mui/material/Alert\";\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Fade from \"react-reveal/Fade\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { add, remove } from \"../../redux/favoritesSlice\";\r\nimport { setCity } from \"../../redux/citySlice\";\r\nimport { ThemeContext } from \"../../App\";\r\n\r\nfunction Homepage() {\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n\r\n  const favoriteCities = useSelector((state) => state.favorites);\r\n  const cityData = useSelector((state) => state.city);\r\n  const dispatch = useDispatch();\r\n\r\n  const [openErrorToast, setOpenErrorToast] = useState(false);\r\n  const [tempScale, setTempScale] = useState(\"celsius\");\r\n\r\n  const [citiesOptions, setCitiesOptions] = useState([]);\r\n  const [currentWeather, setCurrentWeather] = useState({});\r\n  const [weeklyWeather, setWeeklyWeather] = useState([]);\r\n\r\n  const getDefaultCity = async () => {\r\n    let response = await axios\r\n      .get(\r\n        `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${process.env.REACT_APP_API_KEY}&q=32.109333,34.855499`\r\n      )\r\n      .then((res) => {\r\n        dispatch(\r\n          setCity({\r\n            cityName: res.data.AdministrativeArea.LocalizedName,\r\n            country: res.data.Country.LocalizedName,\r\n            id: res.data.Key,\r\n          })\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.warn(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!cityData.id) {\r\n      getDefaultCity();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (cityData.id) {\r\n        await getFiveDaysWeather(cityData.id);\r\n        await getCityWeather(cityData.id);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [cityData]);\r\n\r\n  const getCityWeather = async (cityKey) => {\r\n    axios\r\n      .get(\r\n        `http://dataservice.accuweather.com/currentconditions/v1/${cityKey}?apikey=${process.env.REACT_APP_API_KEY}`\r\n      )\r\n      .then((res) => res.data[0])\r\n      .then((res) => {\r\n        setCurrentWeather({\r\n          celsius: Math.round(res.Temperature.Metric.Value),\r\n          fahrenheit: Math.round(res.Temperature.Imperial.Value),\r\n          text: res.WeatherText,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.warn(err);\r\n      });\r\n  };\r\n\r\n  const getFiveDaysWeather = async (cityKey) => {\r\n    const days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n    let stringDay = \"\";\r\n    let weeklyArr = weeklyWeather ?? [];\r\n\r\n    await axios\r\n      .get(\r\n        `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${process.env.REACT_APP_API_KEY}&metric=true`\r\n      )\r\n      .then((res) => res.data.DailyForecasts)\r\n      .then((res) => {\r\n        for (let i = 0; i < res.length; i++) {\r\n          stringDay = days[new Date(res[i].Date).getDay()];\r\n          if (weeklyArr[i] === undefined) {\r\n            weeklyArr[i] = { day: stringDay };\r\n          }\r\n          weeklyArr[i].minTempCelsius = Math.round(\r\n            res[i].Temperature.Minimum.Value\r\n          );\r\n          weeklyArr[i].maxTempCelsius = Math.round(\r\n            res[i].Temperature.Maximum.Value\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.warn(err);\r\n      });\r\n\r\n    await axios\r\n      .get(\r\n        `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${process.env.REACT_APP_API_KEY}&metric=false`\r\n      )\r\n      .then((res) => res.data.DailyForecasts)\r\n      .then((res) => {\r\n        for (let i = 0; i < res.length; i++) {\r\n          stringDay = days[new Date(res[i].Date).getDay()];\r\n          weeklyArr[i].minTempFahrenheit = Math.round(\r\n            res[i].Temperature.Minimum.Value\r\n          );\r\n          weeklyArr[i].maxTempFahrenheit = Math.round(\r\n            res[i].Temperature.Maximum.Value\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.warn(err);\r\n      });\r\n\r\n    setWeeklyWeather(weeklyArr);\r\n  };\r\n\r\n  const isInFavorites = () => {\r\n    for (let i = 0; i < favoriteCities.length; i++) {\r\n      if (favoriteCities[i].id === cityData.id) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const favoriteToggleHandler = (existsInFavorites) => {\r\n    if (existsInFavorites === true) {\r\n      dispatch(remove(cityData));\r\n    } else {\r\n      dispatch(\r\n        add({\r\n          cityName: cityData.cityName,\r\n          country: cityData.country,\r\n          id: cityData.id,\r\n          celsius: currentWeather.celsius,\r\n          fahrenheit: currentWeather.fahrenheit,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const getOptions = (query) => {\r\n    axios\r\n      .get(\r\n        `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${process.env.REACT_APP_API_KEY}&q=${query}`\r\n      )\r\n      .then((res) => res.data)\r\n      .then((res) => {\r\n        if (res) {\r\n          let newOptionsArr = [];\r\n          res.forEach((element) => {\r\n            newOptionsArr.push({\r\n              cityName: element.LocalizedName,\r\n              country: element.Country.LocalizedName,\r\n              id: element.Key,\r\n              key: element.Key,\r\n            });\r\n          });\r\n          setCitiesOptions(newOptionsArr);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.warn(err);\r\n      });\r\n  };\r\n\r\n  const onInputChangeHandler = (event, value) => {\r\n    const regex = /^[a-zA-Z\\s]*$/;\r\n    if (!regex.test(value)) {\r\n      setOpenErrorToast(true);\r\n    } else {\r\n      getOptions(value);\r\n    }\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpenErrorToast(false);\r\n  };\r\n\r\n  return (\r\n    <Fade>\r\n      <div>\r\n        <div className=\"search-box\">\r\n          <Autocomplete\r\n            disablePortal\r\n            id=\"cities-search-box\"\r\n            onInputChange={(e, v) => onInputChangeHandler(e, v)}\r\n            onChange={(e, v) => {\r\n              if (v !== null) {\r\n                dispatch(setCity(v));\r\n              }\r\n            }}\r\n            options={citiesOptions}\r\n            getOptionLabel={(option) => option.cityName}\r\n            sx={{ width: 300 }}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Search City\" />\r\n            )}\r\n          />\r\n\r\n          <Snackbar\r\n            open={openErrorToast}\r\n            autoHideDuration={6000}\r\n            onClose={handleClose}\r\n          >\r\n            <Alert\r\n              onClose={handleClose}\r\n              severity=\"error\"\r\n              sx={{ width: \"100%\" }}\r\n            >\r\n              Please use English characters only.\r\n            </Alert>\r\n          </Snackbar>\r\n        </div>\r\n\r\n        <div\r\n          className={\r\n            isDarkMode ? \"weather-box dark-weather-box\" : \"weather-box\"\r\n          }\r\n        >\r\n          <div className=\"weather-box-city\">\r\n            {cityData.id && currentWeather.celsius ? (\r\n              <>\r\n                {cityData.cityName}, {cityData.country}\r\n              </>\r\n            ) : (\r\n              <div />\r\n            )}\r\n            <button\r\n              onClick={() => {\r\n                favoriteToggleHandler(isInFavorites());\r\n              }}\r\n            >\r\n              {isInFavorites() ? (\r\n                <BsSuitHeartFill size={20} />\r\n              ) : (\r\n                <BsSuitHeart size={20} />\r\n              )}\r\n              <span>\r\n                {isInFavorites() ? \"Remove from favorites\" : \"Add to favorites\"}\r\n              </span>\r\n            </button>\r\n          </div>\r\n          <div className=\"temperature\">\r\n            {cityData.id && currentWeather.celsius ? (\r\n              <>\r\n                <h1>\r\n                  {tempScale === \"celsius\"\r\n                    ? currentWeather.celsius + \"°C\"\r\n                    : currentWeather.fahrenheit + \"°F\"}\r\n                </h1>\r\n                <h3>{currentWeather.text}</h3>\r\n              </>\r\n            ) : (\r\n              <CircularProgress />\r\n            )}\r\n          </div>\r\n\r\n          <FormControl>\r\n            <RadioGroup\r\n              row\r\n              aria-labelledby=\"radio-buttons-group\"\r\n              value={tempScale}\r\n              name=\"radio-buttons-group\"\r\n              onChange={(e) => setTempScale(e.target.value)}\r\n            >\r\n              <FormControlLabel\r\n                value=\"celsius\"\r\n                control={<Radio />}\r\n                label=\"Celsius\"\r\n              />\r\n              <FormControlLabel\r\n                value=\"fahrenheit\"\r\n                control={<Radio />}\r\n                label=\"Fahrenheit\"\r\n              />\r\n            </RadioGroup>\r\n          </FormControl>\r\n\r\n          <div className=\"futureData\">\r\n            {weeklyWeather.map((e, i) => {\r\n              return (\r\n                <div className=\"futureWeather-box\" key={i}>\r\n                  <p>\r\n                    {e.day}\r\n                    <br />\r\n                    {tempScale === \"celsius\" && e.minTempCelsius && (\r\n                      <>\r\n                        {e.minTempCelsius}°C / {e.maxTempCelsius}°C\r\n                      </>\r\n                    )}\r\n                    {tempScale === \"fahrenheit\" && e.minTempFahrenheit && (\r\n                      <>\r\n                        {e.minTempFahrenheit}°F / {e.maxTempFahrenheit}°F\r\n                      </>\r\n                    )}\r\n                  </p>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <p>\r\n            ☀ Wherever you go, no matter what the weather, always bring your own\r\n            sunshine. ☀\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </Fade>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React, { useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { remove } from \"../../redux/favoritesSlice\";\r\nimport { setCity } from \"../../redux/citySlice\";\r\nimport Fade from \"react-reveal/Fade\";\r\nimport { ThemeContext } from \"../../App\";\r\n\r\nfunction Favorites() {\r\n  const { isDarkMode } = useContext(ThemeContext);\r\n\r\n  const favoriteCities = useSelector((state) => state.favorites);\r\n  const dispatch = useDispatch();\r\n\r\n  const favoriteClicked = (e) => {\r\n    dispatch(\r\n      setCity({\r\n        cityName: e.cityName,\r\n        country: e.country,\r\n        id: e.id,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fade top cascade>\r\n      <div>\r\n        <h1 className={isDarkMode ? \"darkTitle\" : \"lightTitle\"}>\r\n          Favorite cities\r\n        </h1>\r\n        {favoriteCities.length > 0 ? (\r\n          favoriteCities.map((e, i) => {\r\n            return (\r\n              <div className=\"favorite-container\" key={i}>\r\n                <button\r\n                  className=\"removeBtn\"\r\n                  onClick={() => dispatch(remove(e))}\r\n                >\r\n                  Remove\r\n                </button>\r\n                <Link\r\n                  to=\"/\"\r\n                  className=\"favorite-div\"\r\n                  onClick={() => favoriteClicked(e)}\r\n                >\r\n                  <div>\r\n                    {e.cityName}, {e.country}\r\n                  </div>\r\n                  <div style={{ color: \"white\" }}>\r\n                    {e.celsius} °C | {e.fahrenheit} °F\r\n                  </div>\r\n                </Link>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <>\r\n            <p style={{ color: isDarkMode ? \"white\" : \"black\" }}>\r\n              <span style={{ fontWeight: \"bold\" }}>No favorites yet.</span>\r\n              <br />\r\n              Keep track of the cities you're interested in by clicking 'Add to\r\n              favorites'\r\n            </p>\r\n          </>\r\n        )}\r\n      </div>\r\n    </Fade>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n","import React, { useState, createContext } from \"react\";\r\nimport \"./App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Nav from \"./components/Nav/Nav\";\r\nimport Homepage from \"./components/Homepage/Homepage\";\r\nimport Favorites from \"./components/Favorites/Favorites\";\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nfunction App() {\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  const toggleMode = () => {\r\n    setIsDarkMode((prevMode) => !prevMode);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDarkMode, toggleMode }}>\r\n      <Router>\r\n        <div className={isDarkMode ? \"darkApp\" : \"app\"}>\r\n          <Nav />\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path=\"/Or-Arbel-21-02-22/\"\r\n              component={() => {\r\n                return <Homepage />;\r\n              }}\r\n            />\r\n            <Route\r\n              exact\r\n              path=\"/favorites/\"\r\n              component={() => {\r\n                return <Favorites />;\r\n              }}\r\n            />\r\n            <Redirect to=\"/Or-Arbel-21-02-22/\" />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport favoritesReducer from \"./favoritesSlice\";\r\nimport cityReducer from \"./citySlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    favorites: favoritesReducer,\r\n    city: cityReducer,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { store } from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"styles_nav__2AghU\",\"logo\":\"styles_logo__5iaj4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modeButton\":\"styles_modeButton__15I55\",\"modeDiv\":\"styles_modeDiv__nzAtT\"};"],"sourceRoot":""}