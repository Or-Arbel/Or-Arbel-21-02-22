{"version":3,"sources":["components/Nav.js","redux/favoritesSlice.js","redux/citySlice.js","components/Homepage.js","components/Favorites.js","App.js","redux/store.js","index.js"],"names":["Nav","props","mode","theme","className","size","to","onClick","setTheme","favoritesSlice","createSlice","name","initialState","reducers","add","state","action","push","payload","remove","index","findIndex","city","id","splice","actions","citySlice","setCity","cityName","country","Homepage","favoriteCities","useSelector","favorites","cityData","dispatch","useDispatch","useState","openErrorToast","setOpenErrorToast","tempScale","setTempScale","citiesOptions","setCitiesOptions","currentWeather","setCurrentWeather","weeklyWeather","setWeeklyWeather","getDefaultCity","a","axios","get","process","then","res","data","AdministrativeArea","LocalizedName","Country","Key","catch","err","console","warn","useEffect","getFiveDaysWeather","getCityWeather","cityKey","celsius","Math","round","Temperature","Metric","Value","fahrenheit","Imperial","text","WeatherText","days","stringDay","weeklyArr","DailyForecasts","i","length","Date","getDay","undefined","day","minTempCelsius","Minimum","maxTempCelsius","Maximum","minTempFahrenheit","maxTempFahrenheit","isInFavorites","onInputChangeHandler","event","value","query","test","newOptionsArr","forEach","element","key","handleClose","reason","Autocomplete","disablePortal","onInputChange","e","v","onChange","options","getOptionLabel","option","sx","width","renderInput","params","TextField","label","Snackbar","open","autoHideDuration","onClose","Alert","severity","existsInFavorites","CircularProgress","FormControl","RadioGroup","row","target","FormControlLabel","control","Radio","map","Favorites","top","cascade","favoriteClicked","style","color","fontWeight","App","exact","path","component","store","configureStore","reducer","favoritesReducer","cityReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.acac7961.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { CgSun } from \"react-icons/cg\";\nimport { HiMoon } from \"react-icons/hi\";\n\nfunction Nav(props) {\n  const mode =\n    props.theme === \"light\" ? (\n      <div className=\"modeDiv\">\n        <HiMoon size={20} />\n        <span>Change to dark mode</span>\n      </div>\n    ) : (\n      <div className=\"modeDiv\">\n        <CgSun size={20} />\n        <span>Change to light mode</span>\n      </div>\n    );\n\n  const toggleMode = () => {\n    props.setTheme(props.theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <nav className=\"nav\">\n      <ul className=\"nav-links\">\n        <Link to=\"/\">\n          <li>Homepage</li>\n        </Link>\n        <Link to=\"/favorites/\">\n          <li>Favorites</li>\n        </Link>\n      </ul>\n      <button className=\"modeButton\" onClick={toggleMode}>\n        {mode}\n      </button>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = [];\r\n\r\nexport const favoritesSlice = createSlice({\r\n  name: \"favorites\",\r\n  initialState,\r\n  reducers: {\r\n    add: (state, action) => {\r\n      state.push(action.payload);\r\n    },\r\n    remove: (state, action) => {\r\n      const index = state.findIndex((city) => city.id === action.payload.id);\r\n      state.splice(index, 1);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { add, remove } = favoritesSlice.actions;\r\nexport default favoritesSlice.reducer;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {};\r\n\r\n/*\r\n  before the Geolocation task the initialState was: \r\n   cityName: \"Tel Aviv\",\r\n   country: \"Israel\",\r\n   id: 215854,\r\n*/\r\n\r\nconst citySlice = createSlice({\r\n  name: \"city\",\r\n  initialState,\r\n  reducers: {\r\n    setCity: (state, action) => {\r\n      state.cityName = action.payload.cityName;\r\n      state.country = action.payload.country;\r\n      state.id = action.payload.id;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setCity } = citySlice.actions;\r\nexport default citySlice.reducer;\r\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { BsSuitHeart, BsSuitHeartFill } from \"react-icons/bs\";\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport Alert from \"@mui/material/Alert\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormControl from \"@mui/material/FormControl\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Fade from \"react-reveal/Fade\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { add, remove } from \"../redux/favoritesSlice\";\nimport { setCity } from \"../redux/citySlice\";\n\nfunction Homepage(props) {\n  const favoriteCities = useSelector((state) => state.favorites);\n  const cityData = useSelector((state) => state.city);\n  const dispatch = useDispatch();\n\n  const [openErrorToast, setOpenErrorToast] = useState(false);\n  const [tempScale, setTempScale] = useState(\"celsius\");\n\n  const [citiesOptions, setCitiesOptions] = useState([]);\n  const [currentWeather, setCurrentWeather] = useState({});\n  const [weeklyWeather, setWeeklyWeather] = useState([]);\n\n  const getDefaultCity = async () => {\n    let response = await axios\n      .get(\n        `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${process.env.REACT_APP_API_KEY}&q=32.109333,34.855499`\n      )\n      .then((res) => {\n        dispatch(\n          setCity({\n            cityName: res.data.AdministrativeArea.LocalizedName,\n            country: res.data.Country.LocalizedName,\n            id: res.data.Key,\n          })\n        );\n      })\n      .catch((err) => {\n        console.warn(err);\n      });\n  };\n\n  useEffect(() => {\n    if (!cityData.id) {\n      getDefaultCity();\n    }\n  }, []);\n\n  useEffect(async () => {\n    let isCelsius = tempScale === \"celsius\" ? true : false;\n    if (cityData.id) {\n      await getFiveDaysWeather(cityData.id);\n      await getCityWeather(cityData.id);\n    }\n  }, [cityData]);\n\n  const getCityWeather = async (cityKey) => {\n    axios\n      .get(\n        `http://dataservice.accuweather.com/currentconditions/v1/${cityKey}?apikey=${process.env.REACT_APP_API_KEY}`\n      )\n      .then((res) => res.data[0])\n      .then((res) => {\n        setCurrentWeather({\n          celsius: Math.round(res.Temperature.Metric.Value),\n          fahrenheit: Math.round(res.Temperature.Imperial.Value),\n          text: res.WeatherText,\n        });\n      })\n      .catch((err) => {\n        console.warn(err);\n      });\n  };\n\n  const getFiveDaysWeather = async (cityKey) => {\n    const days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    let stringDay = \"\";\n    let weeklyArr = weeklyWeather ?? [];\n\n    let response_c = await axios\n      .get(\n        `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${process.env.REACT_APP_API_KEY}&metric=true`\n      )\n      .then((res) => res.data.DailyForecasts)\n      .then((res) => {\n        for (let i = 0; i < res.length; i++) {\n          stringDay = days[new Date(res[i].Date).getDay()];\n          if (weeklyArr[i] === undefined) {\n            weeklyArr[i] = { day: stringDay };\n          }\n          weeklyArr[i].minTempCelsius = Math.round(\n            res[i].Temperature.Minimum.Value\n          );\n          weeklyArr[i].maxTempCelsius = Math.round(\n            res[i].Temperature.Maximum.Value\n          );\n        }\n      })\n      .catch((err) => {\n        console.warn(err);\n      });\n\n    let response_f = await axios\n      .get(\n        `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${process.env.REACT_APP_API_KEY}&metric=false`\n      )\n      .then((res) => res.data.DailyForecasts)\n      .then((res) => {\n        for (let i = 0; i < res.length; i++) {\n          stringDay = days[new Date(res[i].Date).getDay()];\n          weeklyArr[i].minTempFahrenheit = Math.round(\n            res[i].Temperature.Minimum.Value\n          );\n          weeklyArr[i].maxTempFahrenheit = Math.round(\n            res[i].Temperature.Maximum.Value\n          );\n        }\n      })\n      .catch((err) => {\n        console.warn(err);\n      });\n\n    setWeeklyWeather(weeklyArr);\n  };\n\n  const isInFavorites = () => {\n    for (let i = 0; i < favoriteCities.length; i++) {\n      if (favoriteCities[i].id === cityData.id) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const favoriteToggleHandler = (existsInFavorites) => {\n    if (existsInFavorites === true) {\n      dispatch(remove(cityData));\n    } else {\n      dispatch(\n        add({\n          cityName: cityData.cityName,\n          country: cityData.country,\n          id: cityData.id,\n          celsius: currentWeather.celsius,\n          fahrenheit: currentWeather.fahrenheit,\n        })\n      );\n    }\n  };\n\n  const getOptions = (query) => {\n    axios\n      .get(\n        `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${process.env.REACT_APP_API_KEY}&q=${query}`\n      )\n      .then((res) => res.data)\n      .then((res) => {\n        if (res) {\n          let newOptionsArr = [];\n          res.forEach((element) => {\n            newOptionsArr.push({\n              cityName: element.LocalizedName,\n              country: element.Country.LocalizedName,\n              id: element.Key,\n              key: element.Key,\n            });\n          });\n          setCitiesOptions(newOptionsArr);\n        }\n      })\n      .catch((err) => {\n        console.warn(err);\n      });\n  };\n\n  const onInputChangeHandler = (event, value) => {\n    const regex = /^[a-zA-Z\\s]*$/;\n    if (!regex.test(value)) {\n      setOpenErrorToast(true);\n    } else {\n      getOptions(value);\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenErrorToast(false);\n  };\n\n  return (\n    <Fade>\n      <div>\n        <h1 className={props.theme === \"light\" ? \"lightTitle\" : \"darkTitle\"}>\n          Weather App\n        </h1>\n        <div className=\"search-box\">\n          <Autocomplete\n            disablePortal\n            id=\"cities-search-box\"\n            onInputChange={(e, v) => onInputChangeHandler(e, v)}\n            onChange={(e, v) => {\n              if (v !== null) {\n                dispatch(setCity(v));\n              }\n            }}\n            options={citiesOptions}\n            getOptionLabel={(option) => option.cityName}\n            sx={{ width: 300 }}\n            renderInput={(params) => (\n              <TextField {...params} label=\"Search City\" />\n            )}\n          />\n\n          <Snackbar\n            open={openErrorToast}\n            autoHideDuration={6000}\n            onClose={handleClose}\n          >\n            <Alert\n              onClose={handleClose}\n              severity=\"error\"\n              sx={{ width: \"100%\" }}\n            >\n              Please use English characters only.\n            </Alert>\n          </Snackbar>\n        </div>\n\n        <div\n          className={\n            props.theme === \"light\"\n              ? \"weather-box\"\n              : \"weather-box dark-weather-box\"\n          }\n        >\n          <div className=\"weather-box-city\">\n            {cityData.id && currentWeather.celsius ? (\n              <>\n                {cityData.cityName}, {cityData.country}\n              </>\n            ) : (\n              <div />\n            )}\n            <button\n              onClick={() => {\n                favoriteToggleHandler(isInFavorites());\n              }}\n            >\n              {isInFavorites() ? (\n                <BsSuitHeartFill size={20} />\n              ) : (\n                <BsSuitHeart size={20} />\n              )}\n              <span>\n                {isInFavorites() ? \"Remove from favorites\" : \"Add to favorites\"}\n              </span>\n            </button>\n          </div>\n          <div className=\"temperature\">\n            {cityData.id && currentWeather.celsius ? (\n              <>\n                <h1>\n                  {tempScale === \"celsius\"\n                    ? currentWeather.celsius + \"°C\"\n                    : currentWeather.fahrenheit + \"°F\"}\n                </h1>\n                <h3>{currentWeather.text}</h3>\n              </>\n            ) : (\n              <CircularProgress />\n            )}\n          </div>\n\n          <FormControl>\n            <RadioGroup\n              row\n              aria-labelledby=\"radio-buttons-group\"\n              value={tempScale}\n              name=\"radio-buttons-group\"\n              onChange={(e) => setTempScale(e.target.value)}\n            >\n              <FormControlLabel\n                value=\"celsius\"\n                control={<Radio />}\n                label=\"Celsius\"\n              />\n              <FormControlLabel\n                value=\"fahrenheit\"\n                control={<Radio />}\n                label=\"Fahrenheit\"\n              />\n            </RadioGroup>\n          </FormControl>\n\n          <div className=\"futureData\">\n            {weeklyWeather.map((e, i) => {\n              return (\n                <div className=\"futureWeather-box\" key={i}>\n                  <p>\n                    {e.day}\n                    <br />\n                    {tempScale === \"celsius\" && e.minTempCelsius && (\n                      <>\n                        {e.minTempCelsius}°C / {e.maxTempCelsius}°C\n                      </>\n                    )}\n                    {tempScale === \"fahrenheit\" && e.minTempFahrenheit && (\n                      <>\n                        {e.minTempFahrenheit}°F / {e.maxTempFahrenheit}°F\n                      </>\n                    )}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n          <p>\n            ☀ Wherever you go, no matter what the weather, always bring your own\n            sunshine. ☀\n          </p>\n        </div>\n      </div>\n    </Fade>\n  );\n}\n\nexport default Homepage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { remove } from \"../redux/favoritesSlice\";\nimport { setCity } from \"../redux/citySlice\";\nimport Fade from \"react-reveal/Fade\";\n\nfunction Favorites(props) {\n  const favoriteCities = useSelector((state) => state.favorites);\n  const dispatch = useDispatch();\n\n  const favoriteClicked = (e) => {\n    dispatch(\n      setCity({\n        cityName: e.cityName,\n        country: e.country,\n        id: e.id,\n      })\n    );\n  };\n\n  return (\n    <Fade top cascade>\n      <div>\n        <h1 className={props.theme === \"light\" ? \"lightTitle\" : \"darkTitle\"}>\n          Favorite cities\n        </h1>\n        {favoriteCities.length > 0 ? (\n          favoriteCities.map((e, i) => {\n            return (\n              <div className=\"favorite-container\" key={i}>\n                <button\n                  className=\"removeBtn\"\n                  onClick={() => dispatch(remove(e))}\n                >\n                  Remove\n                </button>\n                <Link\n                  to=\"/\"\n                  className=\"favorite-div\"\n                  onClick={() => favoriteClicked(e)}\n                >\n                  <div>\n                    {e.cityName}, {e.country}\n                  </div>\n                  <div style={{ color: \"white\" }}>\n                    {e.celsius} °C | {e.fahrenheit} °F\n                  </div>\n                </Link>\n              </div>\n            );\n          })\n        ) : (\n          <>\n            <p style={{ color: props.theme === \"dark\" ? \"white\" : \"black\" }}>\n              <span style={{ fontWeight: \"bold\" }}>No favorites yet.</span>\n              <br />\n              Keep track of the cities you're interested in by clicking 'Add to\n              favorites'\n            </p>\n          </>\n        )}\n      </div>\n    </Fade>\n  );\n}\n\nexport default Favorites;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport Nav from \"./components/Nav\";\nimport Homepage from \"./components/Homepage\";\nimport Favorites from \"./components/Favorites\";\n\nfunction App() {\n  const [theme, setTheme] = useState(\"light\");\n\n  return (\n    <Router>\n      <div className={theme === \"light\" ? \"app\" : \"darkApp\"}>\n        <Nav theme={theme} setTheme={setTheme} />\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            component={() => {\n              return <Homepage theme={theme} />;\n            }}\n          />\n          <Route\n            exact\n            path=\"/favorites/\"\n            component={() => {\n              return <Favorites theme={theme} />;\n            }}\n          />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport favoritesReducer from \"./favoritesSlice\";\r\nimport cityReducer from \"./citySlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    favorites: favoritesReducer,\r\n    city: cityReducer,\r\n  },\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}